// <auto-generated />
using System;
using Domain.Services.Repositories.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ApiServer.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20200707200955_Twentieth")]
    partial class Twentieth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Model.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommunityId");

                    b.Property<DateTime>("ContactDay");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Cv");

                    b.Property<int>("DNI");

                    b.Property<string>("EmailAddress");

                    b.Property<int>("EnglishLevel");

                    b.Property<bool>("IsReferred");

                    b.Property<string>("KnownFrom");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("LastName");

                    b.Property<string>("LinkedInProfile");

                    b.Property<string>("Name");

                    b.Property<int?>("OpenPositionId");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("PositionTitle");

                    b.Property<int?>("PreferredOfficeId");

                    b.Property<int?>("ProfileId");

                    b.Property<string>("ReferredBy");

                    b.Property<int>("Status");

                    b.Property<int?>("UserId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.HasIndex("OpenPositionId");

                    b.HasIndex("PreferredOfficeId");

                    b.HasIndex("ProfileId");

                    b.HasIndex("UserId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("Domain.Model.CandidateProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("Domain.Model.CandidateSkill", b =>
                {
                    b.Property<int>("CandidateId");

                    b.Property<int>("SkillId");

                    b.Property<string>("Comment");

                    b.Property<int>("Rate");

                    b.HasKey("CandidateId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("CandidateSkills");
                });

            modelBuilder.Entity("Domain.Model.ClientStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("DelegateName");

                    b.Property<string>("Feedback");

                    b.Property<string>("Interviewer");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("ProcessId");

                    b.Property<int?>("ReaddressStatusId");

                    b.Property<string>("RejectionReason");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<int?>("UserDelegateId");

                    b.Property<int?>("UserOwnerId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("ReaddressStatusId");

                    b.HasIndex("UserDelegateId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("ClientStages");
                });

            modelBuilder.Entity("Domain.Model.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("ProfileId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Community");
                });

            modelBuilder.Entity("Domain.Model.CompanyCalendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Type");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("CompanyCalendar");
                });

            modelBuilder.Entity("Domain.Model.Cv", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("PublicId");

                    b.Property<string>("UrlId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("Cv");
                });

            modelBuilder.Entity("Domain.Model.Dashboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("Domain.Model.DaysOff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("GoogleCalendarEventId");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("DaysOff");
                });

            modelBuilder.Entity("Domain.Model.DeclineReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("DeclineReasons");
                });

            modelBuilder.Entity("Domain.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalInformation");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DNI");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("LastName");

                    b.Property<string>("LinkedInProfile");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("ReviewerId");

                    b.Property<int?>("RoleId");

                    b.Property<int>("Status");

                    b.Property<int?>("UserId");

                    b.Property<long>("Version");

                    b.Property<bool>("isReviewer");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Domain.Model.EmployeeCasualty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("Month");

                    b.Property<int>("Value");

                    b.Property<long>("Version");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("EmployeeCasualty");
                });

            modelBuilder.Entity("Domain.Model.HireProjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("Month");

                    b.Property<int>("Value");

                    b.Property<long>("Version");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("HireProjection");
                });

            modelBuilder.Entity("Domain.Model.HrStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("ActualSalary");

                    b.Property<string>("AdditionalInformation");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("Date");

                    b.Property<int>("EnglishLevel");

                    b.Property<string>("Feedback");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("ProcessId");

                    b.Property<int?>("ReaddressStatusId");

                    b.Property<string>("RejectionReason");

                    b.Property<int>("RejectionReasonsHr");

                    b.Property<bool>("SentEmail");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<int?>("UserDelegateId");

                    b.Property<int?>("UserOwnerId");

                    b.Property<long>("Version");

                    b.Property<float>("WantedSalary");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("ReaddressStatusId");

                    b.HasIndex("UserDelegateId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("HrStages");
                });

            modelBuilder.Entity("Domain.Model.Interview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Client");

                    b.Property<string>("ClientInterviewer");

                    b.Property<int>("ClientStageId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Feedback");

                    b.Property<DateTime>("InterviewDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Project");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ClientStageId");

                    b.ToTable("Interview");
                });

            modelBuilder.Entity("Domain.Model.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationUserId");

                    b.Property<bool>("IsRead");

                    b.Property<string>("ReferredBy");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Domain.Model.OfferStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BackgroundCheckDone");

                    b.Property<DateTime?>("BackgroundCheckDoneDate");

                    b.Property<string>("Bonus");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Feedback");

                    b.Property<DateTime>("Firstday");

                    b.Property<int>("HealthInsurance");

                    b.Property<DateTime>("HireDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<bool>("PreocupationalDone");

                    b.Property<DateTime?>("PreocupationalDoneDate");

                    b.Property<int>("ProcessId");

                    b.Property<string>("RejectionReason");

                    b.Property<int>("RemunerationOffer");

                    b.Property<int>("Seniority");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<int?>("UserDelegateId");

                    b.Property<int?>("UserOwnerId");

                    b.Property<int>("VacationDays");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("UserDelegateId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("OfferStages");
                });

            modelBuilder.Entity("Domain.Model.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Office");
                });

            modelBuilder.Entity("Domain.Model.OpenPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommunityId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("JobDescription");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<bool>("Priority");

                    b.Property<int>("Seniority");

                    b.Property<string>("Studio");

                    b.Property<string>("Title");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("OpenPositions");
                });

            modelBuilder.Entity("Domain.Model.Postulant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Cv");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("LinkedInProfile");

                    b.Property<string>("Name");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Postulants");
                });

            modelBuilder.Entity("Domain.Model.PreOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bonus");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("HealthInsurance");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<DateTime?>("PreOfferDate");

                    b.Property<int>("ProcessId");

                    b.Property<float>("Salary");

                    b.Property<int>("Status");

                    b.Property<DateTime>("TentativeStartDate");

                    b.Property<int>("VacationDays");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("PreOffer");
                });

            modelBuilder.Entity("Domain.Model.PreOfferStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("BackgroundCheckDone");

                    b.Property<DateTime?>("BackgroundCheckDoneDate");

                    b.Property<string>("Bonus");

                    b.Property<DateTime?>("BornDate");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("DNI");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime>("Firstday");

                    b.Property<int>("HealthInsurance");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Notes");

                    b.Property<bool>("PreocupationalDone");

                    b.Property<DateTime?>("PreocupationalDoneDate");

                    b.Property<int>("ProcessId");

                    b.Property<int?>("ReaddressStatusId");

                    b.Property<string>("RejectionReason");

                    b.Property<int>("RemunerationOffer");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<int?>("UserDelegateId");

                    b.Property<int?>("UserOwnerId");

                    b.Property<int>("VacationDays");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("ReaddressStatusId");

                    b.HasIndex("UserDelegateId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("PreOfferStages");
                });

            modelBuilder.Entity("Domain.Model.Process", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CandidateId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CurrentStage");

                    b.Property<int?>("DeclineReasonId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("RejectionReason");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int>("Status");

                    b.Property<int?>("UserDelegateId");

                    b.Property<int?>("UserOwnerId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("DeclineReasonId");

                    b.HasIndex("UserDelegateId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Domain.Model.ReaddressReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("TypeId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ReaddressReasons");
                });

            modelBuilder.Entity("Domain.Model.ReaddressReasonType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("ReaddressReasonTypes");
                });

            modelBuilder.Entity("Domain.Model.ReaddressStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Feedback");

                    b.Property<int>("FromStatus");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int?>("ReaddressReasonId");

                    b.Property<int>("ToStatus");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ReaddressReasonId");

                    b.ToTable("ReaddressStatus");
                });

            modelBuilder.Entity("Domain.Model.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("RoomId");

                    b.Property<DateTime>("SinceReservation");

                    b.Property<DateTime>("UntilReservation");

                    b.Property<int?>("UserId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Domain.Model.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("Version");

                    b.Property<bool>("isActive");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int>("OfficeId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("Domain.Model.Seed.Dummy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("TestValue");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("Dummies");
                });

            modelBuilder.Entity("Domain.Model.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("TypeId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Domain.Model.SkillType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.ToTable("SkillTypes");
                });

            modelBuilder.Entity("Domain.Model.Stage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Feedback");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("ProcessId");

                    b.Property<string>("RejectionReason");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<int?>("UserDelegateId");

                    b.Property<int?>("UserOwnerId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.HasIndex("UserDelegateId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("Stages");
                });

            modelBuilder.Entity("Domain.Model.StageItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssociatedContent");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("StageId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("StageId");

                    b.ToTable("StageItems");
                });

            modelBuilder.Entity("Domain.Model.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsApprove");

                    b.Property<bool>("IsNew");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Title");

                    b.Property<int>("UserId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Domain.Model.TaskItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Checked");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("TaskId");

                    b.Property<string>("Text");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskItems");
                });

            modelBuilder.Entity("Domain.Model.TechnicalStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlternativeSeniority");

                    b.Property<string>("Client");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("Date");

                    b.Property<int>("EnglishLevel");

                    b.Property<string>("Feedback");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("ProcessId");

                    b.Property<int?>("ReaddressStatusId");

                    b.Property<string>("RejectionReason");

                    b.Property<int>("Seniority");

                    b.Property<bool>("SentEmail");

                    b.Property<int>("Status");

                    b.Property<int>("Type");

                    b.Property<int?>("UserDelegateId");

                    b.Property<int?>("UserOwnerId");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId")
                        .IsUnique();

                    b.HasIndex("ReaddressStatusId");

                    b.HasIndex("UserDelegateId");

                    b.HasIndex("UserOwnerId");

                    b.ToTable("TechnicalStages");
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CommunityId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastModifiedBy");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int>("Role");

                    b.Property<string>("Token");

                    b.Property<string>("Username");

                    b.Property<long>("Version");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Model.UserDashboard", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("DashboardId");

                    b.HasKey("UserId", "DashboardId");

                    b.HasIndex("DashboardId");

                    b.ToTable("UserDashboards");
                });

            modelBuilder.Entity("Domain.Model.Candidate", b =>
                {
                    b.HasOne("Domain.Model.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId");

                    b.HasOne("Domain.Model.OpenPosition", "OpenPosition")
                        .WithMany()
                        .HasForeignKey("OpenPositionId");

                    b.HasOne("Domain.Model.Office", "PreferredOffice")
                        .WithMany()
                        .HasForeignKey("PreferredOfficeId");

                    b.HasOne("Domain.Model.CandidateProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId");

                    b.HasOne("Domain.Model.User", "User")
                        .WithMany("Candidates")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Model.CandidateSkill", b =>
                {
                    b.HasOne("Domain.Model.Candidate", "Candidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.ClientStage", b =>
                {
                    b.HasOne("Domain.Model.Process", "Process")
                        .WithOne("ClientStage")
                        .HasForeignKey("Domain.Model.ClientStage", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.ReaddressStatus", "ReaddressStatus")
                        .WithMany()
                        .HasForeignKey("ReaddressStatusId");

                    b.HasOne("Domain.Model.User", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");

                    b.HasOne("Domain.Model.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("Domain.Model.Community", b =>
                {
                    b.HasOne("Domain.Model.CandidateProfile", "Profile")
                        .WithMany("CommunityItems")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.Cv", b =>
                {
                    b.HasOne("Domain.Model.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.DaysOff", b =>
                {
                    b.HasOne("Domain.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.Employee", b =>
                {
                    b.HasOne("Domain.Model.Employee", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.HasOne("Domain.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.HasOne("Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Model.HrStage", b =>
                {
                    b.HasOne("Domain.Model.Process", "Process")
                        .WithOne("HrStage")
                        .HasForeignKey("Domain.Model.HrStage", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.ReaddressStatus", "ReaddressStatus")
                        .WithMany()
                        .HasForeignKey("ReaddressStatusId");

                    b.HasOne("Domain.Model.User", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");

                    b.HasOne("Domain.Model.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("Domain.Model.Interview", b =>
                {
                    b.HasOne("Domain.Model.ClientStage", "ClientStage")
                        .WithMany("Interviews")
                        .HasForeignKey("ClientStageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.Notification", b =>
                {
                    b.HasOne("Domain.Model.User", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.OfferStage", b =>
                {
                    b.HasOne("Domain.Model.Process", "Process")
                        .WithOne("OfferStage")
                        .HasForeignKey("Domain.Model.OfferStage", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.User", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");

                    b.HasOne("Domain.Model.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("Domain.Model.OpenPosition", b =>
                {
                    b.HasOne("Domain.Model.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("Domain.Model.PreOfferStage", b =>
                {
                    b.HasOne("Domain.Model.Process", "Process")
                        .WithOne("PreOfferStage")
                        .HasForeignKey("Domain.Model.PreOfferStage", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.ReaddressStatus", "ReaddressStatus")
                        .WithMany()
                        .HasForeignKey("ReaddressStatusId");

                    b.HasOne("Domain.Model.User", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");

                    b.HasOne("Domain.Model.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("Domain.Model.Process", b =>
                {
                    b.HasOne("Domain.Model.Candidate", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId");

                    b.HasOne("Domain.Model.DeclineReason", "DeclineReason")
                        .WithMany()
                        .HasForeignKey("DeclineReasonId");

                    b.HasOne("Domain.Model.User", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");

                    b.HasOne("Domain.Model.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("Domain.Model.ReaddressReason", b =>
                {
                    b.HasOne("Domain.Model.ReaddressReasonType", "Type")
                        .WithMany("Reasons")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.ReaddressStatus", b =>
                {
                    b.HasOne("Domain.Model.ReaddressReason", "ReaddressReason")
                        .WithMany()
                        .HasForeignKey("ReaddressReasonId");
                });

            modelBuilder.Entity("Domain.Model.Reservation", b =>
                {
                    b.HasOne("Domain.Model.Room", "Room")
                        .WithMany("ReservationItems")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Domain.Model.Room", b =>
                {
                    b.HasOne("Domain.Model.Office", "Office")
                        .WithMany("RoomItems")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.Skill", b =>
                {
                    b.HasOne("Domain.Model.SkillType", "Type")
                        .WithMany("Skills")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.Stage", b =>
                {
                    b.HasOne("Domain.Model.Process", "Process")
                        .WithMany()
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.User", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");

                    b.HasOne("Domain.Model.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("Domain.Model.StageItem", b =>
                {
                    b.HasOne("Domain.Model.Stage", "Stage")
                        .WithMany()
                        .HasForeignKey("StageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.Task", b =>
                {
                    b.HasOne("Domain.Model.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.TaskItem", b =>
                {
                    b.HasOne("Domain.Model.Task", "Task")
                        .WithMany("TaskItems")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Domain.Model.TechnicalStage", b =>
                {
                    b.HasOne("Domain.Model.Process", "Process")
                        .WithOne("TechnicalStage")
                        .HasForeignKey("Domain.Model.TechnicalStage", "ProcessId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.ReaddressStatus", "ReaddressStatus")
                        .WithMany()
                        .HasForeignKey("ReaddressStatusId");

                    b.HasOne("Domain.Model.User", "UserDelegate")
                        .WithMany()
                        .HasForeignKey("UserDelegateId");

                    b.HasOne("Domain.Model.User", "UserOwner")
                        .WithMany()
                        .HasForeignKey("UserOwnerId");
                });

            modelBuilder.Entity("Domain.Model.User", b =>
                {
                    b.HasOne("Domain.Model.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("Domain.Model.UserDashboard", b =>
                {
                    b.HasOne("Domain.Model.Dashboard", "Dashboard")
                        .WithMany("UserDashboards")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Domain.Model.User", "User")
                        .WithMany("UserDashboards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
